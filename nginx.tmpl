{{ $CurrentContainer := where $ "Hostname" .Env.HOSTNAME | first }}
{{ $TLD := .Env.DOMAIN_TLD }}

# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}

# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log off;

{{ if (exists "/etc/nginx/proxy.conf") }}
include /etc/nginx/proxy.conf;
{{ else }}
# HTTP 1.1 support
proxy_http_version 1.1;
proxy_buffering off;
proxy_set_header Host $http_host;
proxy_set_header Upgrade $http_upgrade;
proxy_set_header Connection $proxy_connection;
proxy_set_header X-Real-IP $remote_addr;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
{{ end }}

server {
  listen 80 default_server;
  server_name _;
  root /var/www/default/htdocs;
  error_page 404 /index.html;
}

{{ define "server" }}
{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := or (first (groupByKeys .Containers "Env.VIRTUAL_PROTO")) "http" }}

upstream {{ .Host }} {
{{ $host := .Host }}
{{ range $container := .Containers }}
  {{ $port := coalesce $container.Env.VIRTUAL_PORT (first $container.Addresses).Port "80" }}
  {{ $address := or (first $container.Addresses).IP (first $container.Networks).IP }}
  server {{ $host }}:{{ $port }};
{{ end }}
}

{{/* Get the HTTPS_METHOD defined by containers w/ the same vhost, falling back to "redirect" */}}
{{ $https_method := or (first (groupByKeys .Containers "Env.HTTPS_METHOD")) "redirect" }}

{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys .Containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" .Host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := replace $vhostCert ".crt" "" -1 }}
{{ $vhostCert := replace $vhostCert ".key" "" -1 }}

{{/* Use the cert specifid on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}

{{ $is_https := (and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}

{{ if $is_https }}

{{ if eq $https_method "redirect" }}
server {
  server_name {{ .Host }};
  listen 80;
  access_log /var/log/nginx/access.log vhost;
  return 301 https://{{ .Host }}$request_uri;
}
{{ end }}

server {
  server_name {{ .Host }};
  listen 443 ssl;
  access_log /var/log/nginx/access.log vhost;

  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA;

  ssl_prefer_server_ciphers on;
  ssl_session_timeout 5m;
  ssl_session_cache shared:SSL:50m;

  ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
  ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

  {{ if (exists (printf "/etc/nginx/certs/%s.dhparam.pem" $cert)) }}
  ssl_dhparam {{ printf "/etc/nginx/certs/%s.dhparam.pem" $cert }};
  {{ end }}

  add_header Strict-Transport-Security "max-age=31536000";

  {{ if (exists (printf "/etc/nginx/vhost.d/%s" .Host)) }}
  include {{ printf "/etc/nginx/vhost.d/%s" .Host }};
  {{ else if (exists "/etc/nginx/vhost.d/default") }}
  include /etc/nginx/vhost.d/default;
  {{ end }}

  location / {
    proxy_pass {{ trim $proto }}://{{ trim .Host }};
    {{ if (exists (printf "/etc/nginx/htpasswd/%s" .Host)) }}
    auth_basic  "Restricted {{ .Host }}";
    auth_basic_user_file  {{ (printf "/etc/nginx/htpasswd/%s" .Host) }};
    {{ end }}
                {{ if (exists (printf "/etc/nginx/vhost.d/%s_location" .Host)) }}
                include {{ printf "/etc/nginx/vhost.d/%s_location" .Host}};
                {{ else if (exists "/etc/nginx/vhost.d/default_location") }}
                include /etc/nginx/vhost.d/default_location;
                {{ end }}
  }
}

{{ end }}

{{ if or (not $is_https) (eq $https_method "noredirect") }}

server {
  server_name {{ .Host }};
  listen 80;
  access_log /var/log/nginx/access.log vhost;

  {{ if (exists (printf "/etc/nginx/vhost.d/%s" .Host)) }}
  include {{ printf "/etc/nginx/vhost.d/%s" .Host }};
  {{ else if (exists "/etc/nginx/vhost.d/default") }}
  include /etc/nginx/vhost.d/default;
  {{ end }}

  location / {
    proxy_pass {{ trim $proto }}://{{ trim .Host }};
    {{ if (exists (printf "/etc/nginx/htpasswd/%s" .Host)) }}
    auth_basic  "Restricted {{ .Host }}";
    auth_basic_user_file  {{ (printf "/etc/nginx/htpasswd/%s" .Host) }};
    {{ end }}
                {{ if (exists (printf "/etc/nginx/vhost.d/%s_location" .Host)) }}
                include {{ printf "/etc/nginx/vhost.d/%s_location" .Host}};
                {{ else if (exists "/etc/nginx/vhost.d/default_location") }}
                include /etc/nginx/vhost.d/default_location;
                {{ end }}
  }
}
{{ end }}
{{ end }}

{{ $explicit := whereExist $ "Env.VIRTUAL_HOST" }}
{{ range $host, $containers := groupByMulti $explicit "Env.VIRTUAL_HOST" "," }}
  {{ template "server" (dict "Containers" $containers "Host" $host) }}
{{ end }}

{{ range $project, $projContainers := groupByLabel $ "com.docker.compose.project" }}
  {{ range $service, $containers := groupByLabel $projContainers "com.docker.compose.service" }}
    {{ $host := printf "%s.%s.%s" $service $project $TLD }}
    {{ $dottedHost := printf ".%s" $host }}
    {{/* Don't create the implicit host if an explicit VIRTUAL_HOST with the same name has been defined */}}
    {{ if and (eq 0 (len (where $ "Env.VIRTUAL_HOST" $host))) (eq 0 (len (where $ "Env.VIRTUAL_HOST" $dottedHost))) }}
      {{ $container := first $containers }}
      {{ template "server" (dict "Containers" $containers "Host" $host) }}
    {{ end }}
  {{ end }}
{{ end }}
